// LeetCode/190 - Reverse Bits

impl Solution {
    pub fn reverse_bits(x: u32) -> u32 {
        let mut n = x;
        n = ((n & 0b11111111111111110000000000000000) >> 16)
            | ((n & 0b00000000000000001111111111111111) << 16);
        n = ((n & 0b11111111000000001111111100000000) >> 08)
            | ((n & 0b00000000111111110000000011111111) << 08);
        n = ((n & 0b11110000111100001111000011110000) >> 04)
            | ((n & 0b00001111000011110000111100001111) << 04);
        n = ((n & 0b11001100110011001100110011001100) >> 02)
            | ((n & 0b00110011001100110011001100110011) << 02);
        n = ((n & 0b10101010101010101010101010101010) >> 01)
            | ((n & 0b01010101010101010101010101010101) << 01);
        return n;
    }

    pub fn reverse_bits_alt(x: u32) -> u32 {
        let mut x = x;
        let mut ans = 0;
        for _ in 0..32 {
            ans = (ans >> 1) | (x & (1 << 31));
            x <<= 1;
        }
        return ans;
    }
}
